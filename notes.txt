




<div class="container">
      <h1 class="font-light">Design system</h1>

      <div class="bg-light div-clr">
        <p class="font-dark">light blue bg, with dark text</p>
      </div>

      <div class="bg-white div-clr">
        <p class="font-dark">white bg, with dark text</p>
      </div>

      <div class="bg-light div-clr" style="background-color: hsl(var(--clr-light) / .2);">
        <p class="font-white">light blue bg with a 20% alpha and white text</p>
      </div>

</div>


.box {
    background-color: lightcyan;
    padding: 3rem;

}

.div-clr{
    padding: 3rem;
}




/* .underline-indicators > *{
    padding: 1.5em 0;
    border-bottom: 3px solid hsl(var(--clr-light) / 0);

    transition: border-bottom ease-out .44s;
}

.underline-indicators > *:hover,
.underline-indicators > *:focus{
    border-color: hsl(var(--clr-white) / .5);
    outline: dotted white 1px;
    outline-offset: -2px;
    
}

.underline-indicators > .active{
    border-color: hsl(var(--clr-white) / .8);
}  */

/* indicator a */

/* .underline-indicators a{
    padding: 1em 0;
    border-bottom: 3px solid hsl(var(--clr-light) / 0);

    transition: border-bottom ease-out .44s;
    
}

.underline-indicators a:hover,
.underline-indicators a:focus{
    border-color: hsl(var(--clr-white) / 1);
        
} */

/* indicator button */


/* .underline-indicators button{
    background-color: transparent;
    border-style: none;

    padding: 1em 0;
    border-bottom: 3px solid hsl(var(--clr-light) / 0);

    transition: border-bottom ease-out .44s;    
}

.underline-indicators button:hover,
.underline-indicators button:focus{
    border-color: hsl(var(--clr-white) / 1);
    outline: dotted white 1px;
    outline-offset: -2px;
    
}

.underline-indicators .active{
    border-color: hsl(var(--clr-white) / .8);
} */



<!-- <button class="mobile-nav-toggle" aria-controls="primary-navigation"><span class="sr-only" aria-expanded="false"><Menu></Menu></span></button> -->


================tabs.js

// enclose with brackets for attribute selector
const tabList = document.querySelector('[data-tab-nav="tab-nav"]');
const tabOptions = document.querySelectorAll('[data-tab="tab-option"]');

const tabDestinations = document.querySelectorAll('[data-tab-destination="tab-destination"]');
const tabImages = document.querySelectorAll('[data-destination-image="tab-image"]')


const handleClick = (event) => {
    // console.log(event.target);

    const targetTab = event.target;
    const targetName = targetTab.getAttribute("aria-controls");
    const targetImage = targetTab.getAttribute('data-tab-image')

    // console.log(targetImage);

    //========== tabOption selected
    
    tabList.querySelector('[aria-selected="true"]').setAttribute('aria-selected', false)
    targetTab.setAttribute('aria-selected', true)
    
    //========== tabDestination show content

    tabDestinations.forEach( (tabDestination) => {
        
        // console.log(tabDestination.id);
        tabDestination.setAttribute('hidden', true)
        
        if(targetName === tabDestination.id){
            tabDestination.removeAttribute('hidden')
        }

    })

    //========== tab images

    tabImages.forEach( (tabImage) => {
        const destinationImage = tabImage.getAttribute('data-image')
        // console.log(tabImage.getAttribute('data-image'));

        tabImage.setAttribute('hidden', true)

        if(targetImage === destinationImage){
            
            tabImage.removeAttribute('hidden')
        }
       
    })

    
}

tabOptions.forEach( (tabOption) => {
    tabOption.addEventListener('click', handleClick);
})


